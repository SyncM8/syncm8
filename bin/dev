#!/bin/bash

DEV_CONTAINER_NAME="syncm8_dev"

# Find container id of syncm8_dev in order to exec things against it
# args: name of variable to set container id
findBackendContainerId(){
    local  _resultvar=$1
    local container=$(docker ps|grep $DEV_CONTAINER_NAME|cut -d ' ' -f1)
    if [ ! $container ]; then
        bin/util error "No container for dev found. Check that it is running with bin/dev ps, or start it with bin/dev up"
        exit 1
    fi
    eval $_resultvar="'$container'"
}

# Run commands in exiting dev container as correct user
# args: commands to run in container
runDockerExec(){
    findBackendContainerId container_id
    cmd="docker exec -it -u $(id -u):$(id -g) $container_id "$@
    bin/util logAndRun $cmd
}

# Run commands with interactive turned off in exiting dev container
# args: commands to run in container
runDockerExecNonInteractive(){
    findBackendContainerId container_id
    cmd="docker exec -t -u $(id -u):$(id -g) $container_id "$@
    bin/util logAndRun $cmd
}

runPyRequirements(){
    runDockerExec "pipenv install --dev"
}

# Start devbox/mongo containers
runDockerUp(){
    bin/util logAndRun "docker-compose up --detach"
}

# Start devbox/mongo containers and run flask server inside it
runBackendStart(){
    runDockerUp
    runDockerExec "pipenv run flask run --host 0.0.0.0"
}

# Attach shell to devbox container
runBackendAttach(){
    runDockerExec "bash"
}

# Stop and remove all active containers associated with syncm8
runDockerDown(){
    bin/util logAndRun "docker-compose down"
}

# Show running docker containers associated with syncm8
runDockerPs(){
    bin/util logAndRun "docker-compose ps"
}

# Clean up unused docker stuff
# N.b. deletes all db data associated with syncm8 if mongo is not running
runDockerClean(){
    bin/util logAndRun "docker volume prune -f"
    bin/util logAndRun "docker image prune -f"
    bin/util logAndRun "docker container prune -f"
}

# Run frontend webpack and attach shell
runWebpack(){
    cd client
    npm run start
}

# Run frontend requirements
runClientRequirements(){
    cd client
    npm install
}

# Run pytest
# args: list of args to pass to pytest
runPytest(){
    runDockerExec "pytest "$*
}

# Run migration script
runMigrate(){
    runDockerExec "pipenv run python3 -m src.db.runner"
}

# Run js tests
# args: list of args to pass to npm run test
runJstest(){
    bin/util logAndRun "cd client"
    bin/util logAndRun "npm run test $*"
}

# Run precommit inside container
# args: list of args to pass to pre-commit
runPrecommit(){
    # if no cli args, run standard pre-push
    if [ ! $* ]; then
        args="run --hook-stage push --from-ref origin/main --to-ref HEAD"
    else
        args=$*
    fi
    runDockerExecNonInteractive "pre-commit "$args
}

# One time setup to change git hooks path
runSetup(){
    bin/util logAndRun "git config core.hooksPath bin"
}

# Pull images from aws ECR
runPull(){
    bin/util logAndRun "bin/infra pull"
}

# Hacky solution required for host machine to use python inside venv for linting python
# Remove the symlink to py3, copy the whole py3 binary, fix the other symlinks to point to this binary
runFixPythonLoc(){
    runDockerExec "rm /home/worker/app/server/.venv/bin/python3.8"
    runDockerExec "cp /usr/local/bin/python3.8 /home/worker/app/server/.venv/bin/python3.8"
    runDockerExec "ln -fs python3.8 /home/worker/app/server/.venv/bin/python"
}

# Print help message
printHelp(){
    echo "Usage:  bin/dev COMMAND [options]

A command runner for the syncm8 project.

Commands:
  attach      Attach shell to devbox container if running
  backend     Create containers if not up and attach dev container to shell to faciliatate pdb.
  client      Run frontend webpack and attach shell.
  client-req  Install dependencies for frontend.
  check       Run pre-commit inside dev container.
                All [options] are transparently passed.
  clean       Clean docker data. N.b will delete all db data if mongo is not running.
  down        Stop and remove all active containers associated with syncm8.
  fix-py      Linux specific command to fix python Location in container.
  frontend    Run frontend webpack and attach shell.
  jstest      Run js tests.
                All [options] are transparently passed.
  migrate     Run migration scripts for database.
  pre-commit  Alias for check.
  ps          Show running docker images associated with syncm8.
  pull        Pull images from aws.
  py-req      Install all python requirements.
  pytest      Run pytest inside the dev container.
                All [options] are transparently passed.
  setup       One time setup to add all git hooks.
  webpack     Alias for frontend."
}

op=$1
restArgs="${@:2}"

case $op in
    attach)
        runBackendAttach
        ;;
    clean)
        runDockerClean
        ;;
    client-req)
        runClientRequirements
        ;;
    debug|backend)
        runBackendStart
        ;;
    down)
        runDockerDown
        ;;
    fix-py)
        runFixPythonLoc
        ;;
    jstest)
        runJstest $restArgs
        ;;
    migrate)
        runMigrate
        ;;
    pre-commit|check)
        runPrecommit $restArgs
        ;;
    ps)
        runDockerPs
        ;;
    pull)
        runPull
        ;;
    py-req)
        runPyRequirements
        ;;
    pytest)
        runPytest $restArgs
        ;;
    setup)
        runSetup
        ;;
    up)
        runDockerUp
        ;;
    webpack|frontend|client)
        runWebpack
        ;;
    *)
        printHelp
        ;;
esac
